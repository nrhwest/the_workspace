Insert Algorithm
- if the unbalanced node's height is 
	- positive, then left side (i.e height = 2)
		- if left node's height 
			- equals 1, then Left-Left Rotation
			- equals -1, then Left-Right Rotation
	- negative, then right side (i.e. height = -2)
		- if right node's height 
			- equals 1, then Right-Left Rotation
			- equals -1, then Right-Right Rotation


/////////////////////////////////////

	private Node rotateRight(Node node) {
        Node temp = node.left;
        temp.parent = node.parent;

        node.left = temp.right;
        if (node.left != null) 
            node.left.parent = node;

        temp.right = node;
        node.parent = temp;

        if (temp.parent != null) {
            if (node == temp.parent.left) 
                temp.parent.left = temp;
            else
                temp.parent.right = temp;
        } else
            root = temp;
        return temp;
    }
    
/////////////////////////////////////////

private Node left, right, parent;
		private String data;
		private int key;
		
		public Node (String data, Node parent, Node left, Node right, int key) {
			setData(data);
			setParent(parent);
			setLeft(left);
			setRight(right);
			setKey(key);
		}
		
		public void setData(String data) {
			this.data = data;
		}
		
		public void setParent(Node parent) {
			this.parent = parent;
		}
		
		public void setLeft(Node left) {
			this.left = left;
		}
		
		public void setRight(Node right) {
			this.right = right;
		}
		
		public void setKey(int key) {
			this.key = key;
		}
		
		public String getData() {
			return data;
		}
		
		public Node getParent() {
			return parent;
		}
		
		public Node getLeft() {
			return left;
		}
		
		public Node getRight() {
			return right;
		}

		public int getKey() {
			return key;
		}
		
///////////////////////////////////////

//		System.out.println("--------------------------");
//		
//		while(fileReader.hasNextLine()) {
//			String line = fileReader.nextLine();
//			// System.out.println("line= " + line);
//			if (line.equals("") || line.startsWith("//"))
//				continue;
//			Scanner lineReader = new Scanner(line);
//			System.out.println(lineReader.nextLine());
//		}


\\\\\\\\\\\\\\\\\\\\\\\\\\\


       "([({0-9\\s.:/',\";=+*})])+"
        
        
        // returns smallest element in the tree
        public T findMin() {
            return elementAt(findMin(root));
        }

        // returns largest element in the tree
        public T findMax( ) {
            return elementAt(findMax(root));
        }

        // searches for element in the tree
        public T find(T x) {
            return elementAt(find(x, root));
        }
        
        
   
        
        
        // finds largest element in a subtree
        private Node<T> findMax(Node<T> node){
            if(node == null )
            	return node;
            while(node.getRight() != null)
                node = node.getRight();
            return node;
        }

        // finds smallest element in a subtree
        private Node<T> findMin(Node<T> node) {
            if(node == null)
            	return node;
            while(node.getLeft() != null)
                node = node.getLeft();
            return node;
        }
        
        
        (0+start, end+line.length()-1)
//////////////////////////////////


			if (nextWord.startsWith("\\") || nextWord.equals("")) {
				continue;
			} else if (nextWord.contains(quote)) {
				nextWord = nextWord.replace(quote, "");
			} else if (nextWord.contains("\n")) {
				nextWord = nextWord.replace("\n", "");
			} else if (nextWord.contains("\\n")) {
				nextWord = nextWord.replace("\\n", "");
				
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

				// System.out.println("before line= " + line);
//				if (line.contains("\"")) {
//					// System.out.println("test");
//					line.replaceAll("\"", "");
//				}
				// System.out.println("after line= " + line);
			}
			
			
			
\\\\\\\\\

DICTIONARY
/**
 * Nate West
 * CSMC 256
 * Project 5 – Java Keyword Identifier
 * Purpose: This class models a dictionary of variable names
 * Description: This class reads a Java source code file and parses the file
 * 				leaving just it's variable names and keywords. Then it compares
 * 				the AVLTree of keywords to the tokens found from the file, creating
 * 				a dictionary of variable names.
 */
 
 NODE
 /**
 * Nate West
 * CSMC 256
 * Project 5 – Java Keyword Identifier
 * Purpose: This class models a Node in a Binary Tree
 * Description: A typical TreeNode variable with and element,
 * 				left child, right child, and element.
 */